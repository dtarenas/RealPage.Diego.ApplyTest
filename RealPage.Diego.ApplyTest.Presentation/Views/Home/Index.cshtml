@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    ViewData["Title"] = "Home Page";
}

<section>
    <div class="text-center">
        <h1 class="display-4">Welcome</h1>
        <h3>RealPage - Apply Test</h3>
        <h6 class="text-muted">By Diego Arenas Tangarife</h6>
    </div>
</section>
<hr />
<section>
    <div class="container">
        <div class="row">
            <div class="col-12 text-center">
                @if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Session.GetString("Username")))
                {
                    <h4>Select an option.</h4>
                    <h5 class="text-muted">You are Admin</h5>
                    <a class="btn btn-outline-info" href="#" id="tvMazeSectionBtn">Search On TV Maze</a>

                    @if (!string.IsNullOrEmpty(HttpContextAccessor.HttpContext.Session.GetString("Role")) && Encrypt.Base64Decode(HttpContextAccessor.HttpContext.Session.GetString("Role")) == Roles.Admin.ToString())
                    {
                        <a class="btn btn-outline-warning" href="#" onclick="GetElements('Users')">Manage Users</a>
                    }
                }
                else
                {
                    <h4>To see the options, please log in.</h4>
                    <a class="btn btn-outline-dark mx-1" href="#" onclick="ToggleLogin()"><i class="fas fa-user"></i> Log In</a>
                    <a class="btn btn-outline-dark mx-1" href="#" onclick="ToggleRegister()"><i class="fas fa-check"></i> Register</a>
                }
            </div>
        </div>
    </div>
</section>
<section id="tvMazeSection" class="p-3 d-none">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-12 col-md-10 col-lg-8">
                <form class="card card-sm" id="frmTvMazeSearch">
                    <div class="card-body row no-gutters align-items-center">
                        <!--end of col-->
                        <div class="col">
                            <input class="form-control form-control-lg form-control" name="query" type="search" placeholder="Search topics or keywords" required style=" border: 0; box-shadow: none;">
                        </div>
                        <!--end of col-->
                        <div class="col-auto">
                            <button class="btn btn-lg btn-success" type="submit"><i class="fas fa-search"></i> Search</button>
                        </div>
                        <!--end of col-->
                    </div>
                </form>
            </div>
            <!--end of col-->
            <div class="col-12 py-1" id="tvMazeResultContent">

            </div>
        </div>
    </div>
</section>

@section Scripts{
    <script>
        const $tvMazeSectionBtn = document.querySelector("#tvMazeSectionBtn");
        const $frmTvMazeSearch = document.querySelector("#frmTvMazeSearch");
        const $tvMazeSection = document.querySelector("#tvMazeSection");
        const $tvMazeResultContent = document.querySelector("#tvMazeResultContent");

        if ($tvMazeSectionBtn) {
            $tvMazeSectionBtn.addEventListener("click", (e) => {
                if ($tvMazeSection.classList.contains("d-none")) {
                    $tvMazeSection.classList.remove("d-none");
                    $tvMazeSection.classList.add("d-block");
                } else {
                    $tvMazeSection.classList.remove("d-block");
                    $tvMazeSection.classList.add("d-none");
                }
            });
        }

        if ($frmTvMazeSearch) {
            $frmTvMazeSearch.addEventListener("submit", async (e) => {
                debugger;
                e.preventDefault();

                $tvMazeResultContent.innerHTML = `<i class="fas fa-spinner fa-spin fa-5x fa-fw"></i><br><span class="lead">Loading...</span>`;
                try {
                    debugger;
                    const request = await fetch(`/Search/Index/${e.target["query"].value}`);
                    if (request.ok) {
                        const searchResultObj = await request.text();
                        const Toast = Swal.mixin({
                            toast: true,
                            position: 'top-end',
                            showConfirmButton: false,
                            timer: 3000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.addEventListener('mouseenter', Swal.stopTimer)
                                toast.addEventListener('mouseleave', Swal.resumeTimer)
                            }
                        })

                        Toast.fire({
                            icon: 'success',
                            title: 'Searching successfully'
                        });

                       
                        $tvMazeResultContent.innerHTML = searchResultObj;
                        scrollTo({
                            top: $tvMazeResultContent.offsetTop + 20,
                            behavior: 'smooth'
                        });

                        //searchResultObj.objResult.map((record) => {
                        //    $tvMazeResultContent.innerHTML += `<i>Score: ${record.score}</i><br><b>Show Name: ${record.show.name}</>`
                        //});

                        return;
                    }

                    Swal.fire({
                        icon: "error",
                        title: "Oops!",
                        text: 'Something went wrong'
                    });

                    $tvMazeResultContent.innerHTML = '';
                } catch (ex) {
                    Swal.fire({
                        icon: "error",
                        title: "Oops!",
                        text: ex.message,
                        footer: 'Something went wrong'
                    });

                    $tvMazeResultContent.innerHTML = '';
                }
            });
        }
    </script>
}